1.0 release
============
- Finish C++ interface/parallelization:
	o Implement predict() (accelerate where appropriate)
	o Compute standard errors (accelerate where appropriate)
	o Compute CLIC (accelerate where appropriate)
	o Compute log likelihood for diagnostics
	o Use log likelihood differences to identify convergence (see glm)
	o Save parameters for all iterations
	o Add Matern covariance
- Create configure script
	o Add --with-pthreads option
	o Add --with-cuda option
- Create unit tests
	o Test if threading gives same results as no threading
	o Test if GPU acceleration gives same results as no GPU
- Run sim studies
	o Sanity check to make sure estimates and coverages are as expected
- Update docs:
	o Cover parallization options
	o Ensure all inputs are covered
- Complete manual
	o Add example for a large data set
	o Add example for moderate data set showing GPU acceleration of full model

Later?
========
- Allow for GPU acceleration in block composite likelihood
	o Accelerate operations for large size blocks
	o Concurrently operate on many blocks at the same time

Random notes
=============
- Error check inputs to predict()
- Explore ways to improve speed of predict():
	o In for (b in uB):
		- Could re-construct algo so that we only invert each matrix once.
		- Identify overlap of n1 and n2 so that some of these matrix computations might be reduced.
- Explore ways to improve speed of spacious.fit():
	o In update_theta():
		- Figure out if it is possible to compute/invert cov matrices once since it's done in update_beta() as well.
	o Look for ways to speed up standard error computations
- In spacious():
	o Error check inputs
	o Warn if too high a % of data is in a single block
	o Consider moving computation of D (if needed) to spacious.fit()
- In summary():
	o Figure out how to make nice tables of results
- Add source/reference for mean_max_temps data set
- Use graph to predict with a set level of neighbors

CUDA:
- Allocate space on device once in fit() (such as mX, mY, mSigma, etc.)
